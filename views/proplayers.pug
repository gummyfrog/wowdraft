extends layout

block content
	div#proplayers

		button(v-on:click="pageDown").pageButton
			i.fas.fa-arrow-circle-left

		select(name="role_select" @change="resetFetch" v-model="tag").role_select
			option(value="dps" v-selected) DPS
			option(value="tanks") Tanks
			option(value="healers") Healers


		button(v-on:click="pageUp").pageButton
			i.fas.fa-arrow-circle-right


		h2 Search by Name
		input(type="text", v-model="playername", @change="fetchSource")

		h2 Search by Guild
		input(type="text", v-model="guild", @change="fetchSource")

		h1 Page: {{ page+1 }}

		ul(v-if=found)#players
			player-item(
				v-for="(player, index) in players",
				v-bind:player="player",
				v-bind:leagueID="leagueID"
			)
		h2(v-else) Player not found.

	script.
		var leagueID = "!{leagueID}";


		Vue.component('player-item', {
			props: ['player', 'leagueID'],
		 	template: `
		 	<li :class="'player ' + player.class"> 

		 	<div id="player-info"> 
			 	<div id="info">
				 	<h2> {{player.name}} </h2>
				 	<h3> {{player.guild}} </h3>
				 	<h3> {{player.rankings[0].spec}} {{player.class}}</h3>
			 	</div>

			 	<div id="averages">
				 	<div id="avg_parse_badge">
				 		<span id="avg_parse" class="parse">{{player.avgParse}}</span>
				 		<span>Average Parse</span>
				 	</div>

				 	<div id="avg_dps_badge">
			 			<span id="avg_dps">{{player.avgDps}}</span>
			 			<span>Average DPS</span>
			 		</div>

			 		<div id="avg_speed_badge">
			 			<span id="avg_speed" class="parse">{{player.avgSpeed}}</span>
			 			<span>Average Speed</span>
			 		</div>
			 	</div>
		 	</div> 
		 	<div id="rankings">
		 	<player-rankings 
				v-for="ranking in player.rankings.slice(0, 4)"
				v-bind:rankings="ranking"
			>
			</div>

		 	<form v-if="!{onClock}" action="/api/leagues/${leagueID}/draftPlayer" method='post'>
		 		<input type="hidden" name="player_id" :value=player._id>
		 		<input type="hidden" name="tag" :value=player.tag>
		 		<button type="submit" class="draft_button"> <h3> <i class="fas fa-handshake"></i> draft this player </h3> </button>
		 	</form>

		 	</li>'`
		})

		//- <a v-if="!{onClock}"> draft me! </a>
		Vue.component('player-rankings', {
			props: ['rankings'],
			template: `
				<li class="parseBadge"> 
				<span id="encounter_boss"> {{rankings.encounter_data.encounter.name}} </span> 

				<span id="encounter_dps">{{rankings.amount}} DPS </span> 

				<span id="encounter_rankPercent" class="parse">{{rankings.rankPercent}}</span> 
				</li>
			`
		})

		var app = new Vue({
			el: '#proplayers',
			data: {
					players: [],
					found: true,
					page: 0,
					tag: "dps",
					leagueID: leagueID,
					playername: "",
					guild: "",
					lastSource: "generic",
			},
			methods: {
				fetchSource:function(event) {
					var newSource = "generic";
					if(this.playername != "") {
						this.fetchPlayer();
						newSource = "player";
					} else if(this.guild != "") {
						this.fetchGuild();
						newSource = "guild";
					} else {
						this.fetchData();
					}

					if(this.lastSource != newSource) {
						this.lastSource = newSource;
						this.page = 0;
					}
				},
				fetchData: function(event) {
					fetch(`/api/proplayers/${this.leagueID}/${this.tag}/${this.page}`)
					.then(res => res.json())
					.then((response) => {
						app.players = response;
						console.log(response);
					})
					.then(() => {
						$('.parse').each((i, obj) => {
							var obj = $(obj);
							obj.css("color", parseStyle(obj.text()))
						})
					})
					.catch((err) => {
						console.log(err);
					})
				},

				fetchPlayer:function(event) {
					fetch(`/api/proplayer/${this.leagueID}/${this.tag}/${this.playername}`)
					.then(res => res.json())
					.then((response) => {
						if(response != null) {
							app.players = response;
							app.found = true;
						} else {
							app.players = [];
							app.found = false;
						}
					})
					.then(() => {
						$('.parse').each((i, obj) => {
							var obj = $(obj);
							obj.css("color", parseStyle(obj.text()))
						})
					})
					.catch((err) => {
						console.log(err);
					})
				},

				fetchGuild:function(event) {
					fetch(`/api/proplayer/guild/${this.leagueID}/${this.tag}/${this.guild}/${this.page}`)
					.then(res => res.json())
					.then((response) => {
						console.log(response);
						if(response != null) {
							app.players = response;
							app.found = true;
						} else {
							app.players = [];
							app.found = false;
						}
					})
					.then(() => {
						$('.parse').each((i, obj) => {
							var obj = $(obj);
							obj.css("color", parseStyle(obj.text()))
						})
					})
					.catch((err) => {
						console.log(err);
					})
				},

				pageDown:function(event) {
					if(this.page-1 < 0) {
						return;
					}
					this.page--;
					this.fetchSource();
				},
				pageUp:function(event) {
					this.page++;
					this.fetchSource();
				},
				resetFetch:function(event){
					this.page = 0;
					this.fetchSource();
				}
			}
		})

		function parseStyle(parse){
			var color = "Gray";
			parse=parseInt(parse);

			if(parse < 25) {
				color = "Gray"
			} else if(parse < 50) {
				color = "Green"
			} else if(parse < 75) {
				color = "Blue"
			} else if(parse < 95) {
				color = "Purple"
			} else if(parse < 99) {
				color = "Orange"
			} else {
				color = "Gold"
			}

			return color;
		}

		app.fetchData("dps", 0);

